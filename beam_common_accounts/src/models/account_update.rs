/*
 * accounts basic
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountUpdate {
    #[serde(rename = "thirdParty", skip_serializing_if = "Option::is_none")]
    pub third_party: Option<String>,
    #[serde(rename = "hasThirdPartyToken")]
    pub has_third_party_token: bool,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "external", skip_serializing_if = "Option::is_none")]
    pub external: Option<Vec<crate::models::ExternalIdentity>>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "gamerTagAssoc", skip_serializing_if = "Option::is_none")]
    pub gamer_tag_assoc: Option<Box<crate::models::GamerTagAssociation>>,
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(rename = "deviceId", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
}

impl AccountUpdate {
    pub fn new(has_third_party_token: bool) -> AccountUpdate {
        AccountUpdate {
            third_party: None,
            has_third_party_token,
            country: None,
            external: None,
            language: None,
            gamer_tag_assoc: None,
            token: None,
            device_id: None,
            user_name: None,
        }
    }
}
