/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerListingView {
    #[serde(rename = "clientDataList")]
    pub client_data_list: Vec<models::ClientDataEntry>,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "clientData")]
    pub client_data: std::collections::HashMap<String, String>,
    #[serde(rename = "cooldown", skip_serializing_if = "Option::is_none")]
    pub cooldown: Option<i32>,
    #[serde(rename = "secondsActive")]
    pub seconds_active: i64,
    #[serde(rename = "offer")]
    pub offer: Box<models::PlayerOfferView>,
    #[serde(rename = "queryAfterPurchase")]
    pub query_after_purchase: bool,
    #[serde(rename = "purchasesRemain", skip_serializing_if = "Option::is_none")]
    pub purchases_remain: Option<i32>,
    #[serde(rename = "secondsRemain", skip_serializing_if = "Option::is_none")]
    pub seconds_remain: Option<i64>,
    #[serde(rename = "active")]
    pub active: bool,
}

impl PlayerListingView {
    pub fn new(client_data_list: Vec<models::ClientDataEntry>, symbol: String, client_data: std::collections::HashMap<String, String>, seconds_active: i64, offer: models::PlayerOfferView, query_after_purchase: bool, active: bool) -> PlayerListingView {
        PlayerListingView {
            client_data_list,
            symbol,
            client_data,
            cooldown: None,
            seconds_active,
            offer: Box::new(offer),
            query_after_purchase,
            purchases_remain: None,
            seconds_remain: None,
            active,
        }
    }
}

