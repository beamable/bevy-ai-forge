/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventInventoryPendingRewards {
    #[serde(rename = "currencies", skip_serializing_if = "Option::is_none")]
    pub currencies: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<models::ItemCreateRequest>>,
    #[serde(rename = "empty")]
    pub empty: bool,
}

impl EventInventoryPendingRewards {
    pub fn new(empty: bool) -> EventInventoryPendingRewards {
        EventInventoryPendingRewards {
            currencies: None,
            items: None,
            empty,
        }
    }
}

