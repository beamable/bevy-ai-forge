/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Item {
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    #[serde(rename = "proxyId", skip_serializing_if = "Option::is_none")]
    pub proxy_id: Option<String>,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "properties")]
    pub properties: Vec<models::ItemProperty>,
    #[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
    pub proxy: Option<Box<models::FederationInfo>>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
}

impl Item {
    pub fn new(id: i64, properties: Vec<models::ItemProperty>) -> Item {
        Item {
            updated_at: None,
            proxy_id: None,
            id,
            properties,
            proxy: None,
            created_at: None,
        }
    }
}

