/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Social {
    #[serde(rename = "playerId")]
    pub player_id: String,
    #[serde(rename = "friends")]
    pub friends: Vec<models::Friend>,
    #[serde(rename = "blocked")]
    pub blocked: Vec<models::Player>,
    #[serde(rename = "invites")]
    pub invites: Vec<models::Invite>,
}

impl Social {
    pub fn new(player_id: String, friends: Vec<models::Friend>, blocked: Vec<models::Player>, invites: Vec<models::Invite>) -> Social {
        Social {
            player_id,
            friends,
            blocked,
            invites,
        }
    }
}

