/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerStoreView {
    #[serde(rename = "listings")]
    pub listings: Vec<models::PlayerListingView>,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "nextDeltaSeconds", skip_serializing_if = "Option::is_none")]
    pub next_delta_seconds: Option<i64>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "secondsRemain", skip_serializing_if = "Option::is_none")]
    pub seconds_remain: Option<i64>,
}

impl PlayerStoreView {
    pub fn new(listings: Vec<models::PlayerListingView>, symbol: String) -> PlayerStoreView {
        PlayerStoreView {
            listings,
            symbol,
            next_delta_seconds: None,
            title: None,
            seconds_remain: None,
        }
    }
}

