/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SteamOrderInfoResponse {
    #[serde(rename = "usstate")]
    pub usstate: String,
    #[serde(rename = "items")]
    pub items: Vec<models::SteamOrderInfoItem>,
    #[serde(rename = "country")]
    pub country: String,
    #[serde(rename = "timecreated")]
    pub timecreated: String,
    #[serde(rename = "transid")]
    pub transid: i64,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "orderid")]
    pub orderid: i64,
    #[serde(rename = "steamid")]
    pub steamid: i64,
    #[serde(rename = "currency")]
    pub currency: String,
    #[serde(rename = "time")]
    pub time: String,
}

impl SteamOrderInfoResponse {
    pub fn new(usstate: String, items: Vec<models::SteamOrderInfoItem>, country: String, timecreated: String, transid: i64, status: String, orderid: i64, steamid: i64, currency: String, time: String) -> SteamOrderInfoResponse {
        SteamOrderInfoResponse {
            usstate,
            items,
            country,
            timecreated,
            transid,
            status,
            orderid,
            steamid,
            currency,
            time,
        }
    }
}

