/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ThirdPartyAssociation {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "userBusinessId", skip_serializing_if = "Option::is_none")]
    pub user_business_id: Option<String>,
    #[serde(rename = "userAppId")]
    pub user_app_id: String,
    #[serde(rename = "meta")]
    pub meta: std::collections::HashMap<String, String>,
    #[serde(rename = "appId")]
    pub app_id: String,
}

impl ThirdPartyAssociation {
    pub fn new(name: String, user_app_id: String, meta: std::collections::HashMap<String, String>, app_id: String) -> ThirdPartyAssociation {
        ThirdPartyAssociation {
            name,
            email: None,
            user_business_id: None,
            user_app_id,
            meta,
            app_id,
        }
    }
}

