/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Store {
    #[serde(rename = "activeListingLimit", skip_serializing_if = "Option::is_none")]
    pub active_listing_limit: Option<i32>,
    #[serde(rename = "choose", skip_serializing_if = "Option::is_none")]
    pub choose: Option<i32>,
    #[serde(rename = "listings")]
    pub listings: Vec<models::Listing>,
    #[serde(rename = "showInactiveListings", skip_serializing_if = "Option::is_none")]
    pub show_inactive_listings: Option<bool>,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "refreshTime", skip_serializing_if = "Option::is_none")]
    pub refresh_time: Option<i32>,
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

impl Store {
    pub fn new(listings: Vec<models::Listing>, symbol: String) -> Store {
        Store {
            active_listing_limit: None,
            choose: None,
            listings,
            show_inactive_listings: None,
            symbol,
            refresh_time: None,
            title: None,
        }
    }
}

