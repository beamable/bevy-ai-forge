/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionUser {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "gamerTag")]
    pub gamer_tag: i64,
    #[serde(rename = "username")]
    pub username: String,
    #[serde(rename = "lastName")]
    pub last_name: String,
    #[serde(rename = "firstName")]
    pub first_name: String,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "cid", skip_serializing_if = "Option::is_none")]
    pub cid: Option<String>,
    #[serde(rename = "lang")]
    pub lang: String,
    #[serde(rename = "heartbeat", skip_serializing_if = "Option::is_none")]
    pub heartbeat: Option<i64>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
}

impl SessionUser {
    pub fn new(name: String, email: String, gamer_tag: i64, username: String, last_name: String, first_name: String, id: i64, lang: String) -> SessionUser {
        SessionUser {
            name,
            email,
            gamer_tag,
            username,
            last_name,
            first_name,
            id,
            cid: None,
            lang,
            heartbeat: None,
            password: None,
        }
    }
}

