/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventObjectData {
    #[serde(rename = "inFlight", skip_serializing_if = "Option::is_none")]
    pub in_flight: Option<Vec<models::InFlightMessage>>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<i64>,
    #[serde(rename = "rootEventId", skip_serializing_if = "Option::is_none")]
    pub root_event_id: Option<String>,
    #[serde(rename = "originType", skip_serializing_if = "Option::is_none")]
    pub origin_type: Option<String>,
    #[serde(rename = "state")]
    pub state: models::EventState,
    #[serde(rename = "running")]
    pub running: bool,
    #[serde(rename = "phase", skip_serializing_if = "Option::is_none")]
    pub phase: Option<Box<models::EventPhaseRuntime>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<models::ClientPermission>>,
    #[serde(rename = "lastChildEventId", skip_serializing_if = "Option::is_none")]
    pub last_child_event_id: Option<String>,
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<i64>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    #[serde(rename = "content")]
    pub content: Box<models::Event>,
    #[serde(rename = "done")]
    pub done: bool,
    #[serde(rename = "leaderboardId")]
    pub leaderboard_id: String,
    #[serde(rename = "phaseTimes", skip_serializing_if = "Option::is_none")]
    pub phase_times: Option<Vec<models::EventPhaseTime>>,
}

impl EventObjectData {
    pub fn new(state: models::EventState, running: bool, id: String, content: models::Event, done: bool, leaderboard_id: String) -> EventObjectData {
        EventObjectData {
            in_flight: None,
            start_time: None,
            root_event_id: None,
            origin_type: None,
            state,
            running,
            phase: None,
            permissions: None,
            last_child_event_id: None,
            end_time: None,
            id,
            origin: None,
            created_at: None,
            content: Box::new(content),
            done,
            leaderboard_id,
            phase_times: None,
        }
    }
}

