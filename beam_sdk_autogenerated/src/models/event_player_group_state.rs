/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventPlayerGroupState {
    #[serde(rename = "groupScore")]
    pub group_score: f64,
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(rename = "rankRewards")]
    pub rank_rewards: Vec<models::EventRewardState>,
    #[serde(rename = "groupRank")]
    pub group_rank: i64,
    #[serde(rename = "scoreRewards")]
    pub score_rewards: Vec<models::EventRewardState>,
}

impl EventPlayerGroupState {
    pub fn new(group_score: f64, rank_rewards: Vec<models::EventRewardState>, group_rank: i64, score_rewards: Vec<models::EventRewardState>) -> EventPlayerGroupState {
        EventPlayerGroupState {
            group_score,
            group_id: None,
            rank_rewards,
            group_rank,
            score_rewards,
        }
    }
}

