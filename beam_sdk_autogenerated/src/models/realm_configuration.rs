/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealmConfiguration {
    #[serde(rename = "websocketConfig")]
    pub websocket_config: Box<models::WebSocketConfiguration>,
    #[serde(rename = "microserviceURI")]
    pub microservice_uri: String,
    #[serde(rename = "portalURI")]
    pub portal_uri: String,
    #[serde(rename = "microserviceEcrURI")]
    pub microservice_ecr_uri: String,
    #[serde(rename = "storageBrowserURI")]
    pub storage_browser_uri: String,
    #[serde(rename = "environment")]
    pub environment: String,
}

impl RealmConfiguration {
    pub fn new(websocket_config: models::WebSocketConfiguration, microservice_uri: String, portal_uri: String, microservice_ecr_uri: String, storage_browser_uri: String, environment: String) -> RealmConfiguration {
        RealmConfiguration {
            websocket_config: Box::new(websocket_config),
            microservice_uri,
            portal_uri,
            microservice_ecr_uri,
            storage_browser_uri,
            environment,
        }
    }
}

