/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatabaseMeasurements {
    #[serde(rename = "measurements", skip_serializing_if = "Option::is_none")]
    pub measurements: Option<Vec<models::DatabaseMeasurement>>,
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    #[serde(rename = "links")]
    pub links: Vec<models::Link>,
    #[serde(rename = "hostId", skip_serializing_if = "Option::is_none")]
    pub host_id: Option<String>,
    #[serde(rename = "granularity", skip_serializing_if = "Option::is_none")]
    pub granularity: Option<String>,
    #[serde(rename = "end", skip_serializing_if = "Option::is_none")]
    pub end: Option<String>,
    #[serde(rename = "databaseName")]
    pub database_name: String,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<String>,
    #[serde(rename = "processId", skip_serializing_if = "Option::is_none")]
    pub process_id: Option<String>,
}

impl DatabaseMeasurements {
    pub fn new(links: Vec<models::Link>, database_name: String) -> DatabaseMeasurements {
        DatabaseMeasurements {
            measurements: None,
            group_id: None,
            links,
            host_id: None,
            granularity: None,
            end: None,
            database_name,
            start: None,
            process_id: None,
        }
    }
}

