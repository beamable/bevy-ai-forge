/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationRequestData {
    #[serde(rename = "messageParams", skip_serializing_if = "Option::is_none")]
    pub message_params: Option<Vec<String>>,
    #[serde(rename = "channel", skip_serializing_if = "Option::is_none")]
    pub channel: Option<String>,
    #[serde(rename = "messageKey", skip_serializing_if = "Option::is_none")]
    pub message_key: Option<String>,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    #[serde(rename = "shard", skip_serializing_if = "Option::is_none")]
    pub shard: Option<String>,
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "messageFull", skip_serializing_if = "Option::is_none")]
    pub message_full: Option<String>,
}

impl NotificationRequestData {
    pub fn new() -> NotificationRequestData {
        NotificationRequestData {
            message_params: None,
            channel: None,
            message_key: None,
            context: None,
            shard: None,
            meta: None,
            message_full: None,
        }
    }
}

