/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventPlayerStateView {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "running")]
    pub running: bool,
    #[serde(rename = "allPhases")]
    pub all_phases: Vec<models::EventPlayerPhaseView>,
    #[serde(rename = "rank")]
    pub rank: i64,
    #[serde(rename = "score")]
    pub score: f64,
    #[serde(rename = "currentPhase", skip_serializing_if = "Option::is_none")]
    pub current_phase: Option<Box<models::EventPlayerPhaseView>>,
    #[serde(rename = "secondsRemaining")]
    pub seconds_remaining: i64,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "leaderboardId")]
    pub leaderboard_id: String,
    #[serde(rename = "rankRewards")]
    pub rank_rewards: Vec<models::EventRewardState>,
    #[serde(rename = "groupRewards", skip_serializing_if = "Option::is_none")]
    pub group_rewards: Option<Box<models::EventPlayerGroupState>>,
    #[serde(rename = "scoreRewards")]
    pub score_rewards: Vec<models::EventRewardState>,
}

impl EventPlayerStateView {
    pub fn new(name: String, running: bool, all_phases: Vec<models::EventPlayerPhaseView>, rank: i64, score: f64, seconds_remaining: i64, id: String, leaderboard_id: String, rank_rewards: Vec<models::EventRewardState>, score_rewards: Vec<models::EventRewardState>) -> EventPlayerStateView {
        EventPlayerStateView {
            name,
            running,
            all_phases,
            rank,
            score,
            current_phase: None,
            seconds_remaining,
            id,
            leaderboard_id,
            rank_rewards,
            group_rewards: None,
            score_rewards,
        }
    }
}

