/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LocalDate {
    #[serde(rename = "dayOfYear")]
    pub day_of_year: i32,
    #[serde(rename = "leapYear")]
    pub leap_year: bool,
    #[serde(rename = "chronology")]
    pub chronology: Box<models::IsoChronology>,
    #[serde(rename = "dayOfWeek")]
    pub day_of_week: DayOfWeek,
    #[serde(rename = "monthValue")]
    pub month_value: i32,
    #[serde(rename = "dayOfMonth")]
    pub day_of_month: i32,
    #[serde(rename = "year")]
    pub year: i32,
    #[serde(rename = "era")]
    pub era: Box<models::Era>,
    #[serde(rename = "month")]
    pub month: Month,
}

impl LocalDate {
    pub fn new(day_of_year: i32, leap_year: bool, chronology: models::IsoChronology, day_of_week: DayOfWeek, month_value: i32, day_of_month: i32, year: i32, era: models::Era, month: Month) -> LocalDate {
        LocalDate {
            day_of_year,
            leap_year,
            chronology: Box::new(chronology),
            day_of_week,
            month_value,
            day_of_month,
            year,
            era: Box::new(era),
            month,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DayOfWeek {
    #[serde(rename = "SATURDAY")]
    Saturday,
    #[serde(rename = "MONDAY")]
    Monday,
    #[serde(rename = "THURSDAY")]
    Thursday,
    #[serde(rename = "TUESDAY")]
    Tuesday,
    #[serde(rename = "FRIDAY")]
    Friday,
    #[serde(rename = "WEDNESDAY")]
    Wednesday,
    #[serde(rename = "SUNDAY")]
    Sunday,
}

impl Default for DayOfWeek {
    fn default() -> DayOfWeek {
        Self::Saturday
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Month {
    #[serde(rename = "DECEMBER")]
    December,
    #[serde(rename = "APRIL")]
    April,
    #[serde(rename = "JULY")]
    July,
    #[serde(rename = "SEPTEMBER")]
    September,
    #[serde(rename = "JUNE")]
    June,
    #[serde(rename = "FEBRUARY")]
    February,
    #[serde(rename = "OCTOBER")]
    October,
    #[serde(rename = "AUGUST")]
    August,
    #[serde(rename = "NOVEMBER")]
    November,
    #[serde(rename = "MARCH")]
    March,
    #[serde(rename = "MAY")]
    May,
    #[serde(rename = "JANUARY")]
    January,
}

impl Default for Month {
    fn default() -> Month {
        Self::December
    }
}

