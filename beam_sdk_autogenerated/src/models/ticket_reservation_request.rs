/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TicketReservationRequest {
    #[serde(rename = "players", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub players: Option<Option<Vec<String>>>,
    #[serde(rename = "matchTypes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub match_types: Option<Option<Vec<String>>>,
    #[serde(rename = "maxWaitDurationSecs", skip_serializing_if = "Option::is_none")]
    pub max_wait_duration_secs: Option<i32>,
    #[serde(rename = "team", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub team: Option<Option<String>>,
    #[serde(rename = "watchOnlineStatus", skip_serializing_if = "Option::is_none")]
    pub watch_online_status: Option<bool>,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<models::Tag>>>,
}

impl TicketReservationRequest {
    pub fn new() -> TicketReservationRequest {
        TicketReservationRequest {
            players: None,
            match_types: None,
            max_wait_duration_secs: None,
            team: None,
            watch_online_status: None,
            tags: None,
        }
    }
}

