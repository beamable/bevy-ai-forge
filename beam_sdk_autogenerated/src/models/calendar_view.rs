/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CalendarView {
    #[serde(rename = "nextIndex")]
    pub next_index: i32,
    #[serde(rename = "nextClaimSeconds")]
    pub next_claim_seconds: i64,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "remainingSeconds")]
    pub remaining_seconds: i64,
    #[serde(rename = "days")]
    pub days: Vec<models::RewardCalendarDay>,
}

impl CalendarView {
    pub fn new(next_index: i32, next_claim_seconds: i64, id: String, remaining_seconds: i64, days: Vec<models::RewardCalendarDay>) -> CalendarView {
        CalendarView {
            next_index,
            next_claim_seconds,
            id,
            remaining_seconds,
            days,
        }
    }
}

