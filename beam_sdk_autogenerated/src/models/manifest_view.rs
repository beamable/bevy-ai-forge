/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ManifestView {
    #[serde(rename = "createdByAccountId", skip_serializing_if = "Option::is_none")]
    pub created_by_account_id: Option<i64>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "checksum")]
    pub checksum: String,
    #[serde(rename = "storageReference", skip_serializing_if = "Option::is_none")]
    pub storage_reference: Option<Vec<models::ServiceStorageReference>>,
    #[serde(rename = "manifest")]
    pub manifest: Vec<models::ServiceReference>,
    #[serde(rename = "created")]
    pub created: i64,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
}

impl ManifestView {
    pub fn new(id: String, checksum: String, manifest: Vec<models::ServiceReference>, created: i64) -> ManifestView {
        ManifestView {
            created_by_account_id: None,
            id,
            checksum,
            storage_reference: None,
            manifest,
            created,
            comments: None,
        }
    }
}

