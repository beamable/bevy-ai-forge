/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TournamentEntry {
    #[serde(rename = "stage")]
    pub stage: i32,
    #[serde(rename = "tier")]
    pub tier: i32,
    #[serde(rename = "previousStageChange", skip_serializing_if = "Option::is_none")]
    pub previous_stage_change: Option<i32>,
    #[serde(rename = "rank")]
    pub rank: i64,
    #[serde(rename = "score")]
    pub score: f64,
    #[serde(rename = "currencyRewards")]
    pub currency_rewards: Vec<models::TournamentCurrencyReward>,
    #[serde(rename = "nextStageChange", skip_serializing_if = "Option::is_none")]
    pub next_stage_change: Option<i32>,
    #[serde(rename = "playerId")]
    pub player_id: i64,
    #[serde(rename = "stageChange")]
    pub stage_change: i32,
}

impl TournamentEntry {
    pub fn new(stage: i32, tier: i32, rank: i64, score: f64, currency_rewards: Vec<models::TournamentCurrencyReward>, player_id: i64, stage_change: i32) -> TournamentEntry {
        TournamentEntry {
            stage,
            tier,
            previous_stage_change: None,
            rank,
            score,
            currency_rewards,
            next_stage_change: None,
            player_id,
            stage_change,
        }
    }
}

