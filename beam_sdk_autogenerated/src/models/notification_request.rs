/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NotificationRequest {
    #[serde(rename = "payload")]
    pub payload: Box<models::NotificationRequestData>,
    #[serde(rename = "customChannelSuffix", skip_serializing_if = "Option::is_none")]
    pub custom_channel_suffix: Option<String>,
    #[serde(rename = "dbid", skip_serializing_if = "Option::is_none")]
    pub dbid: Option<i64>,
    #[serde(rename = "useSignalWhenPossible", skip_serializing_if = "Option::is_none")]
    pub use_signal_when_possible: Option<bool>,
    #[serde(rename = "dbids", skip_serializing_if = "Option::is_none")]
    pub dbids: Option<Vec<i64>>,
}

impl NotificationRequest {
    pub fn new(payload: models::NotificationRequestData) -> NotificationRequest {
        NotificationRequest {
            payload: Box::new(payload),
            custom_channel_suffix: None,
            dbid: None,
            use_signal_when_possible: None,
            dbids: None,
        }
    }
}

