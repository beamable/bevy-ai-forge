/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeaderboardAddRequest {
    #[serde(rename = "maxScore", skip_serializing_if = "Option::is_none")]
    pub max_score: Option<f64>,
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "score")]
    pub score: f64,
    #[serde(rename = "minScore", skip_serializing_if = "Option::is_none")]
    pub min_score: Option<f64>,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "increment", skip_serializing_if = "Option::is_none")]
    pub increment: Option<bool>,
}

impl LeaderboardAddRequest {
    pub fn new(score: f64, id: i64) -> LeaderboardAddRequest {
        LeaderboardAddRequest {
            max_score: None,
            stats: None,
            score,
            min_score: None,
            id,
            increment: None,
        }
    }
}

