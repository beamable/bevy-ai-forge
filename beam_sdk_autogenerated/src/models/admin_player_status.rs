/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdminPlayerStatus {
    #[serde(rename = "tournamentId")]
    pub tournament_id: String,
    #[serde(rename = "stage")]
    pub stage: i32,
    #[serde(rename = "unclaimedRewards")]
    pub unclaimed_rewards: Vec<models::TournamentCurrencyReward>,
    #[serde(rename = "tier")]
    pub tier: i32,
    #[serde(rename = "rank")]
    pub rank: i32,
    #[serde(rename = "score")]
    pub score: f64,
    #[serde(rename = "playerId")]
    pub player_id: i64,
    #[serde(rename = "contentId")]
    pub content_id: String,
    #[serde(rename = "nextCycleStartMs")]
    pub next_cycle_start_ms: i64,
}

impl AdminPlayerStatus {
    pub fn new(tournament_id: String, stage: i32, unclaimed_rewards: Vec<models::TournamentCurrencyReward>, tier: i32, rank: i32, score: f64, player_id: i64, content_id: String, next_cycle_start_ms: i64) -> AdminPlayerStatus {
        AdminPlayerStatus {
            tournament_id,
            stage,
            unclaimed_rewards,
            tier,
            rank,
            score,
            player_id,
            content_id,
            next_cycle_start_ms,
        }
    }
}

