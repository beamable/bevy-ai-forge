/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MailSearchClause {
    #[serde(rename = "forSender", skip_serializing_if = "Option::is_none")]
    pub for_sender: Option<i64>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "onlyCount")]
    pub only_count: bool,
    #[serde(rename = "categories", skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<i64>,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    #[serde(rename = "states", skip_serializing_if = "Option::is_none")]
    pub states: Option<Vec<String>>,
}

impl MailSearchClause {
    pub fn new(name: String, only_count: bool) -> MailSearchClause {
        MailSearchClause {
            for_sender: None,
            name,
            only_count,
            categories: None,
            start: None,
            limit: None,
            states: None,
        }
    }
}

