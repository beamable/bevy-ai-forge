/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeaderboardDetails {
    #[serde(rename = "lbid")]
    pub lbid: String,
    #[serde(rename = "orules", skip_serializing_if = "Option::is_none")]
    pub orules: Option<Box<models::OrderRules>>,
    #[serde(rename = "numberOfEntries")]
    pub number_of_entries: i32,
    #[serde(rename = "fullName")]
    pub full_name: String,
    #[serde(rename = "metaData", skip_serializing_if = "Option::is_none")]
    pub meta_data: Option<Box<models::MetadataView>>,
    #[serde(rename = "view")]
    pub view: Box<models::LeaderBoardView>,
}

impl LeaderboardDetails {
    pub fn new(lbid: String, number_of_entries: i32, full_name: String, view: models::LeaderBoardView) -> LeaderboardDetails {
        LeaderboardDetails {
            lbid,
            orules: None,
            number_of_entries,
            full_name,
            meta_data: None,
            view: Box::new(view),
        }
    }
}

