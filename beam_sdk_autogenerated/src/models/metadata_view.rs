/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetadataView {
    #[serde(rename = "freezeTime", skip_serializing_if = "Option::is_none")]
    pub freeze_time: Option<i64>,
    #[serde(rename = "derivatives", skip_serializing_if = "Option::is_none")]
    pub derivatives: Option<Vec<String>>,
    #[serde(rename = "parentLeaderboard")]
    pub parent_leaderboard: String,
    #[serde(rename = "cohortSettings", skip_serializing_if = "Option::is_none")]
    pub cohort_settings: Option<Box<models::LeaderboardCohortSettings>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<models::ClientPermission>>,
    #[serde(rename = "frozen")]
    pub frozen: bool,
    #[serde(rename = "maxEntries", skip_serializing_if = "Option::is_none")]
    pub max_entries: Option<i32>,
    #[serde(rename = "partitioned")]
    pub partitioned: bool,
    #[serde(rename = "cohorted")]
    pub cohorted: bool,
    #[serde(rename = "expiration", skip_serializing_if = "Option::is_none")]
    pub expiration: Option<i64>,
}

impl MetadataView {
    pub fn new(parent_leaderboard: String, frozen: bool, partitioned: bool, cohorted: bool) -> MetadataView {
        MetadataView {
            freeze_time: None,
            derivatives: None,
            parent_leaderboard,
            cohort_settings: None,
            permissions: None,
            frozen,
            max_entries: None,
            partitioned,
            cohorted,
            expiration: None,
        }
    }
}

