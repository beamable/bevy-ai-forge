/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupUpdate {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "enrollmentType", skip_serializing_if = "Option::is_none")]
    pub enrollment_type: Option<String>,
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    #[serde(rename = "slogan", skip_serializing_if = "Option::is_none")]
    pub slogan: Option<String>,
    #[serde(rename = "requirement", skip_serializing_if = "Option::is_none")]
    pub requirement: Option<i64>,
    #[serde(rename = "motd", skip_serializing_if = "Option::is_none")]
    pub motd: Option<String>,
    #[serde(rename = "clientData", skip_serializing_if = "Option::is_none")]
    pub client_data: Option<String>,
    #[serde(rename = "subGroup", skip_serializing_if = "Option::is_none")]
    pub sub_group: Option<i64>,
}

impl GroupUpdate {
    pub fn new() -> GroupUpdate {
        GroupUpdate {
            name: None,
            enrollment_type: None,
            tag: None,
            slogan: None,
            requirement: None,
            motd: None,
            client_data: None,
            sub_group: None,
        }
    }
}

