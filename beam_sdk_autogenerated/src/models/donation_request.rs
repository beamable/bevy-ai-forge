/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DonationRequest {
    #[serde(rename = "timeRequested")]
    pub time_requested: i64,
    #[serde(rename = "progress")]
    pub progress: Vec<models::DonationEntry>,
    #[serde(rename = "satisfied")]
    pub satisfied: bool,
    #[serde(rename = "playerId")]
    pub player_id: i64,
    #[serde(rename = "currency")]
    pub currency: Box<models::Currency>,
}

impl DonationRequest {
    pub fn new(time_requested: i64, progress: Vec<models::DonationEntry>, satisfied: bool, player_id: i64, currency: models::Currency) -> DonationRequest {
        DonationRequest {
            time_requested,
            progress,
            satisfied,
            player_id,
            currency: Box::new(currency),
        }
    }
}

