/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Account {
    #[serde(rename = "inFlight", skip_serializing_if = "Option::is_none")]
    pub in_flight: Option<Vec<models::InFlightMessage>>,
    #[serde(rename = "createdTimeMillis")]
    pub created_time_millis: i64,
    #[serde(rename = "realmId", skip_serializing_if = "Option::is_none")]
    pub realm_id: Option<String>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "roleString", skip_serializing_if = "Option::is_none")]
    pub role_string: Option<String>,
    #[serde(rename = "deviceIds", skip_serializing_if = "Option::is_none")]
    pub device_ids: Option<Vec<String>>,
    #[serde(rename = "privilegedAccount")]
    pub privileged_account: bool,
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "wasMigrated", skip_serializing_if = "Option::is_none")]
    pub was_migrated: Option<bool>,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "gamerTags")]
    pub gamer_tags: Vec<models::GamerTagAssociation>,
    #[serde(rename = "external")]
    pub external: Vec<models::ExternalIdentity>,
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<models::RoleMapping>>,
    #[serde(rename = "updatedTimeMillis")]
    pub updated_time_millis: i64,
    #[serde(rename = "thirdParties")]
    pub third_parties: Vec<models::ThirdPartyAssociation>,
    #[serde(rename = "deviceId", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(rename = "heartbeat", skip_serializing_if = "Option::is_none")]
    pub heartbeat: Option<i64>,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
}

impl Account {
    pub fn new(created_time_millis: i64, privileged_account: bool, id: i64, gamer_tags: Vec<models::GamerTagAssociation>, external: Vec<models::ExternalIdentity>, updated_time_millis: i64, third_parties: Vec<models::ThirdPartyAssociation>) -> Account {
        Account {
            in_flight: None,
            created_time_millis,
            realm_id: None,
            email: None,
            role_string: None,
            device_ids: None,
            privileged_account,
            country: None,
            was_migrated: None,
            id,
            gamer_tags,
            external,
            language: None,
            roles: None,
            updated_time_millis,
            third_parties,
            device_id: None,
            user_name: None,
            heartbeat: None,
            password: None,
        }
    }
}

