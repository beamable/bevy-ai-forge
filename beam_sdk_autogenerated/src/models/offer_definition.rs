/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OfferDefinition {
    #[serde(rename = "titles")]
    pub titles: Vec<String>,
    #[serde(rename = "symbol")]
    pub symbol: String,
    #[serde(rename = "obtainItems", skip_serializing_if = "Option::is_none")]
    pub obtain_items: Option<Vec<models::ItemCreateRequest>>,
    #[serde(rename = "lootRoll", skip_serializing_if = "Option::is_none")]
    pub loot_roll: Option<Box<models::CommerceLootRoll>>,
    #[serde(rename = "obtainCurrency", skip_serializing_if = "Option::is_none")]
    pub obtain_currency: Option<Vec<models::CurrencyChange>>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<String>,
    #[serde(rename = "images")]
    pub images: Vec<String>,
    #[serde(rename = "descriptions")]
    pub descriptions: Vec<String>,
    #[serde(rename = "obtain")]
    pub obtain: Vec<String>,
}

impl OfferDefinition {
    pub fn new(titles: Vec<String>, symbol: String, images: Vec<String>, descriptions: Vec<String>, obtain: Vec<String>) -> OfferDefinition {
        OfferDefinition {
            titles,
            symbol,
            obtain_items: None,
            loot_roll: None,
            obtain_currency: None,
            metadata: None,
            images,
            descriptions,
            obtain,
        }
    }
}

