/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceStorageReference {
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "storageType")]
    pub storage_type: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "checksum")]
    pub checksum: String,
    #[serde(rename = "templateId", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<String>,
}

impl ServiceStorageReference {
    pub fn new(archived: bool, enabled: bool, storage_type: String, id: String, checksum: String) -> ServiceStorageReference {
        ServiceStorageReference {
            archived,
            enabled,
            storage_type,
            id,
            checksum,
            template_id: None,
        }
    }
}

