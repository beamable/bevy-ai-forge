/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrialCustomRule {
    #[serde(rename = "customOp")]
    pub custom_op: String,
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    #[serde(rename = "customItems", skip_serializing_if = "Option::is_none")]
    pub custom_items: Option<Vec<models::TrialCustomRule>>,
    #[serde(rename = "customAttr")]
    pub custom_attr: String,
    #[serde(rename = "customVal")]
    pub custom_val: Vec<String>,
    #[serde(rename = "access", skip_serializing_if = "Option::is_none")]
    pub access: Option<String>,
}

impl TrialCustomRule {
    pub fn new(custom_op: String, custom_attr: String, custom_val: Vec<String>) -> TrialCustomRule {
        TrialCustomRule {
            custom_op,
            domain: None,
            custom_items: None,
            custom_attr,
            custom_val,
            access: None,
        }
    }
}

