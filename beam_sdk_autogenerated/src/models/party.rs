/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Party {
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    #[serde(rename = "restriction", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub restriction: Option<Option<String>>,
    #[serde(rename = "leader", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub leader: Option<Option<String>>,
    #[serde(rename = "members", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub members: Option<Option<Vec<String>>>,
    #[serde(rename = "maxSize", skip_serializing_if = "Option::is_none")]
    pub max_size: Option<i32>,
    #[serde(rename = "pendingInvites", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pending_invites: Option<Option<Vec<String>>>,
}

impl Party {
    pub fn new() -> Party {
        Party {
            id: None,
            restriction: None,
            leader: None,
            members: None,
            max_size: None,
            pending_invites: None,
        }
    }
}

