/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UploadRequest {
    #[serde(rename = "objectKey")]
    pub object_key: String,
    #[serde(rename = "lastModified", skip_serializing_if = "Option::is_none")]
    pub last_modified: Option<i64>,
    #[serde(rename = "checksum", skip_serializing_if = "Option::is_none")]
    pub checksum: Option<String>,
    #[serde(rename = "sizeInBytes")]
    pub size_in_bytes: i64,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<models::MetadataPair>>,
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
}

impl UploadRequest {
    pub fn new(object_key: String, size_in_bytes: i64) -> UploadRequest {
        UploadRequest {
            object_key,
            last_modified: None,
            checksum: None,
            size_in_bytes,
            metadata: None,
            deleted: None,
        }
    }
}

