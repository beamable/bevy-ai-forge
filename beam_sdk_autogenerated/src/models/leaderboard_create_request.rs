/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LeaderboardCreateRequest {
    #[serde(rename = "freezeTime", skip_serializing_if = "Option::is_none")]
    pub freeze_time: Option<i64>,
    #[serde(rename = "derivatives", skip_serializing_if = "Option::is_none")]
    pub derivatives: Option<Vec<String>>,
    #[serde(rename = "scoreName", skip_serializing_if = "Option::is_none")]
    pub score_name: Option<String>,
    #[serde(rename = "cohortSettings", skip_serializing_if = "Option::is_none")]
    pub cohort_settings: Option<Box<models::LeaderboardCohortSettings>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<models::ClientPermission>>,
    #[serde(rename = "maxEntries", skip_serializing_if = "Option::is_none")]
    pub max_entries: Option<i32>,
    #[serde(rename = "partitioned", skip_serializing_if = "Option::is_none")]
    pub partitioned: Option<bool>,
    #[serde(rename = "sharded")]
    pub sharded: bool,
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<i64>,
}

impl LeaderboardCreateRequest {
    pub fn new(sharded: bool) -> LeaderboardCreateRequest {
        LeaderboardCreateRequest {
            freeze_time: None,
            derivatives: None,
            score_name: None,
            cohort_settings: None,
            permissions: None,
            max_entries: None,
            partitioned: None,
            sharded,
            ttl: None,
        }
    }
}

