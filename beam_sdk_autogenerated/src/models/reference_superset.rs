/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceSuperset {
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "uri")]
    pub uri: String,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "checksum", skip_serializing_if = "Option::is_none")]
    pub checksum: Option<String>,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<String>,
}

impl ReferenceSuperset {
    pub fn new(uri: String, version: String, id: String, r#type: String) -> ReferenceSuperset {
        ReferenceSuperset {
            tags: None,
            uri,
            version,
            id,
            checksum: None,
            r#type,
            visibility: None,
        }
    }
}

