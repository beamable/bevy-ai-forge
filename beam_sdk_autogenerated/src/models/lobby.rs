/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Lobby {
    #[serde(rename = "lobbyId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lobby_id: Option<Option<String>>,
    #[serde(rename = "matchType", skip_serializing_if = "Option::is_none")]
    pub match_type: Option<Box<models::MatchType>>,
    #[serde(rename = "created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created: Option<Option<String>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "host", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub host: Option<Option<String>>,
    #[serde(rename = "players", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub players: Option<Option<Vec<models::LobbyPlayer>>>,
    #[serde(rename = "passcode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub passcode: Option<Option<String>>,
    #[serde(rename = "restriction", skip_serializing_if = "Option::is_none")]
    pub restriction: Option<models::LobbyRestriction>,
    #[serde(rename = "maxPlayers", skip_serializing_if = "Option::is_none")]
    pub max_players: Option<i32>,
    #[serde(rename = "data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data: Option<Option<std::collections::HashMap<String, String>>>,
}

impl Lobby {
    pub fn new() -> Lobby {
        Lobby {
            lobby_id: None,
            match_type: None,
            created: None,
            name: None,
            description: None,
            host: None,
            players: None,
            passcode: None,
            restriction: None,
            max_players: None,
            data: None,
        }
    }
}

