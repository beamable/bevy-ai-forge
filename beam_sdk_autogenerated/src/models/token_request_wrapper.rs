/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TokenRequestWrapper {
    #[serde(rename = "device_id", skip_serializing_if = "Option::is_none")]
    pub device_id: Option<String>,
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<Vec<String>>,
    #[serde(rename = "refresh_token", skip_serializing_if = "Option::is_none")]
    pub refresh_token: Option<String>,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<models::ContextInfo>>,
    #[serde(rename = "third_party", skip_serializing_if = "Option::is_none")]
    pub third_party: Option<String>,
    #[serde(rename = "redirect_uri", skip_serializing_if = "Option::is_none")]
    pub redirect_uri: Option<String>,
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    #[serde(rename = "provider_namespace", skip_serializing_if = "Option::is_none")]
    pub provider_namespace: Option<String>,
    #[serde(rename = "challenge_solution", skip_serializing_if = "Option::is_none")]
    pub challenge_solution: Option<Box<models::ChallengeSolution>>,
    #[serde(rename = "external_token", skip_serializing_if = "Option::is_none")]
    pub external_token: Option<String>,
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
    #[serde(rename = "customerScoped", skip_serializing_if = "Option::is_none")]
    pub customer_scoped: Option<bool>,
    #[serde(rename = "provider_service", skip_serializing_if = "Option::is_none")]
    pub provider_service: Option<String>,
    #[serde(rename = "grant_type")]
    pub grant_type: String,
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
}

impl TokenRequestWrapper {
    pub fn new(grant_type: String) -> TokenRequestWrapper {
        TokenRequestWrapper {
            device_id: None,
            username: None,
            scope: None,
            refresh_token: None,
            context: None,
            third_party: None,
            redirect_uri: None,
            client_id: None,
            provider_namespace: None,
            challenge_solution: None,
            external_token: None,
            code: None,
            token: None,
            customer_scoped: None,
            provider_service: None,
            grant_type,
            password: None,
        }
    }
}

