/*
 * Auth Actor
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@beamable.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RankEntry {
    #[serde(rename = "stats", skip_serializing_if = "Option::is_none")]
    pub stats: Option<Vec<models::RankEntryStat>>,
    #[serde(rename = "rank")]
    pub rank: i64,
    #[serde(rename = "score", skip_serializing_if = "Option::is_none")]
    pub score: Option<f64>,
    #[serde(rename = "columns")]
    pub columns: std::collections::HashMap<String, i64>,
    #[serde(rename = "gt")]
    pub gt: i64,
}

impl RankEntry {
    pub fn new(rank: i64, columns: std::collections::HashMap<String, i64>, gt: i64) -> RankEntry {
        RankEntry {
            stats: None,
            rank,
            score: None,
            columns,
            gt,
        }
    }
}

